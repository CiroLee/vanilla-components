const t=document.createElement("template");t.innerHTML='\n  <style>\n    :host {\n      display: inline-flex;\n    }\n    :host(.block) {\n      display:flex;\n    }\n    button[data-color="danger"] {\n      --color: var(--danger-color);\n    }\n    button[data-color="warning"] {\n      --color: var(--warning-color);\n    }\n    button[data-color="success"] {\n      --color: var(--success-color);\n    }\n    button[data-size="sm"] {\n      height: 24px;\n      font-size: 12px;\n      padding: 0 10px;\n    }\n    button[data-size="lg"] {\n      height: 40px;\n      font-size: 16px;\n    }\n    button[data-rounded="sm"] {\n      border-radius: 4px;\n    }\n    button[data-rounded="lg"] {\n      border-radius: 10px;\n    }\n    button[data-rounded="full"] {\n      border-radius:calc(infinity * 1px);\n    }\n    button[data-rounded="none"] {\n      border-radius: 0;\n    }\n    button {\n      --color: var(--primary-color);\n      width: 100%;\n      display: inherit;\n      border: 0;\n      justify-content: center;\n      align-items: center;\n      gap: 4px;\n      background-color: var(--color);\n      color: white;\n      font-size: 14px;\n      padding: 0 16px;\n      height: 32px;\n      border-radius: 6px;\n      transition-property: background-color,scale;\n      transition-duration: 0.2s;\n      box-sizing: border-box;\n      &[data-loading]{\n        pointer-events: none;\n        background-color: color-mix(in oklch, var(--color) 75%, white 25%);\n      }\n      &:disabled {\n        cursor: not-allowed;\n        background-color: color-mix(in oklch, var(--color) 65%, white 35%);\n      }\n      &:not(:disabled):hover {\n        background-color: color-mix(in oklch, var(--color) 90%, black 10%);\n      }\n      &:not(:disabled):active {\n        scale: 0.96;\n      }\n      &:focus-visible {\n        outline: 2px solid color-mix(in oklch, var(--color) 90%, white 60%);\n        outline-offset: 2px;\n      }\n      &:where([data-variant="outline"],[data-variant="ghost"]) {\n        background-color: transparent;\n        color: var(--color);\n        &:not(:disabled):hover {\n          background-color: color-mix(in oklch, var(--color) 15%, transparent 75%);\n        }\n        &:disabled {\n          background-color: transparent;\n          color: color-mix(in oklch, var(--color) 65%, white 35%);\n          border-color: color-mix(in oklch, var(--color) 40%, white 60%);\n        }\n      }\n      &[data-variant="outline"] {\n        border: 1px solid color-mix(in oklch, var(--color) 60%, white 40%);\n        &:not(:disabled):hover {\n          background-color: color-mix(in oklch, var(--color) 16%, white 0%);\n        }\n      }\n\n    }\n  </style>\n  <button part="button"><slot></slot></button>\n';class e extends HTMLElement{#t;#e;static{customElements.define("va-button",this)}constructor(){super(),this.attachShadow({mode:"open"}),this.shadowRoot.appendChild(t.content.cloneNode(!0)),this.#t=this.shadowRoot.querySelector("button")}connectedCallback(){this.#o(),this.#n()}disconnectedCallback(){this.#i()}static get observedAttributes(){return["disabled","block","color","variant","size","rounded","loading","type"]}attributeChangedCallback(t,e,o){switch(t){case"disabled":this.#a();break;case"block":this.#r();break;case"variant":this.#s(o);break;case"color":this.#l(o);break;case"size":this.#d(o);break;case"rounded":this.#c(o);break;case"loading":this.#h()}}#n(){this.#e=t=>{this.disabled||this.dispatchEvent(new CustomEvent("onBtnClick",{bubbles:!0,composed:!0,detail:{originalEvent:t}}))},this.#t.addEventListener("click",this.#e)}#i(){this.#t&&this.#e&&this.#t.removeEventListener("click",this.#e)}get disabled(){return this.#t.disabled}set disabled(t){t?this.setAttribute("disabled",""):this.removeAttribute("disabled")}get block(){return this.hasAttribute("block")}set block(t){t?this.setAttribute("block",""):this.removeAttribute("block")}get loading(){return this.hasAttribute("loading")}set loading(t){t?this.setAttribute("loading",""):this.removeAttribute("loading")}set variant(t){this.setAttribute("variant",t)}set color(t){this.setAttribute("color",t)}set size(t){this.setAttribute("size",t)}set rounded(t){this.setAttribute("rounded",t)}#r(){this.classList.toggle("block",this.hasAttribute("block"))}#a(){this.#t.disabled=this.hasAttribute("disabled"),this.#t.setAttribute("aria-disabled",this.hasAttribute("disabled"))}#s(t="solid"){this.#t.setAttribute("data-variant",t)}#l(t){this.#t.setAttribute("data-color",t)}#d(t="md"){this.#t.setAttribute("data-size",t)}#c(t){this.#t.setAttribute("data-rounded",t)}#h(){this.#t.setAttribute("data-loading",this.hasAttribute("loading")),this.hasAttribute("loading")?this.#t.setAttribute("aria-label","loading"):this.#t.removeAttribute("aria-label")}#o(t="button"){this.#t.setAttribute("type",t)}}const o=document.createElement("template");o.innerHTML='\n  <style>\n    dialog {\n      width: 480px;\n      border: 1px solid var(--border-color);\n      padding: 14px;\n      outline: 0;\n      box-shadow: 0 6px 14px -4px rgb(0 0 0 / 8%);\n      border-radius: 6px;\n      position: relative;\n      &::backdrop {\n        background-color: rgb(0 0 0 / 40%);\n      }\n      &[data-overlay="blur"]::backdrop {\n        backdrop-filter: blur(4px);\n      }\n      @media (max-width: 640px) {\n        width: 82%;\n      }\n    }\n    .modal-close {\n      width: 24px;\n      height: 24px;\n      position: absolute;\n      right: 10px;\n      transition: opacity 0.2s ease;\n      opacity: 0.65;\n      &:hover {\n        opacity: 1;\n      }\n      &::after,\n      &::before {\n        content: "";\n        width: 14px;\n        height: 2px;\n        position: absolute;\n        background-color: color-mix(in oklch, var(--black-color) 40%, white 60%);\n        rotate: 45deg;\n        transform-origin: center;\n        inset: 50% 0 0 50%;\n        translate: -50% -50%;\n        border-radius: 2px;\n\n      }\n      &::after {\n        rotate: -45deg;\n      }\n\n    }\n    .header {\n      display: flex;\n      align-items: center;\n      font-weight: 600;\n      font-size: 18px;\n    }\n    ::slotted([slot="description"]) {\n      font-size: 14px;\n      color: var(--secondary-text-color);\n      margin: 8px 0 !important;\n    }\n    ::slotted([slot="footer"]) {\n      padding-top: 16px !important;\n      display: flex;\n      justify-content: flex-end;\n      gap: 6px;\n    }\n    ::slotted([slot="content"]) {\n      max-height: 56vh;\n      overflow-y: auto;\n    }\n\n  </style>\n  <dialog part="modal">\n    <div part="modal-header" class="header" aria-label="modal-header">\n      <slot name="title"></slot>\n      <div role="button" aria-label="close button" class="modal-close"></div>\n    </div>\n    <slot part="modal-description" name="description"></slot>\n    <slot part="modal-content" name="content"></slot>\n    <slot part="modal-footer" name="footer"></slot>\n  </dialog>\n';class n extends HTMLElement{#b;#u;overlayClickable;static{customElements.define("va-modal",n)}constructor(){super(),this.attachShadow({mode:"open"}),this.shadowRoot.appendChild(o.content.cloneNode(!0)),this.#b=this.shadowRoot.querySelector("dialog"),this.#u=this.shadowRoot.querySelector(".modal-close")}static get observedAttributes(){return["show","overlay","overlay-clickable"]}attributeChangedCallback(t,e,o){"show"===t&&this.open(),"overlay"===t&&this.#p(o),"overlay-clickable"===t&&this.#g(o)}connectedCallback(){this.#u.addEventListener("click",this.close.bind(this)),this.#b.addEventListener("click",this.#v.bind(this))}disconnectedCallback(){this.#u.removeEventListener("click",this.this.close.bind(this)),this.#b.removeEventListener("click",this.#v.bind(this))}set show(t){t?this.setAttribute("show",""):(this.removeAttribute("show"),this.close())}#v(t){if(!this.overlayClickable)return;const e=this.#b.getBoundingClientRect();e.top<=t.clientY&&t.clientY<=e.bottom&&e.left<=t.clientX&&t.clientX<=e.right||this.close()}open(){this.#b.showModal(),this.#b.animate({translate:["0 20px","0 0"],opacity:[0,1]},{duration:150,fill:"both",easing:"ease-in"}),this.#b.animate({opacity:[0,1]},{duration:150,fill:"both",easing:"ease-in",pseudoElement:"::backdrop"})}close(){const t=[this.#b.animate({translate:["0 0","0 20px"],opacity:[1,0]},{duration:150,fill:"both",easing:"ease-in"}),this.#b.animate({opacity:[1,0]},{duration:150,fill:"both",easing:"ease-in",pseudoElement:"::backdrop"})];Promise.all(t.map(t=>t.finished)).then(()=>{this.removeAttribute("show"),this.#b.close()})}#p(t="default"){this.#b.setAttribute("data-overlay",t)}#g(){this.overlayClickable=this.hasAttribute("overlay-clickable")}}class i extends HTMLElement{static{customElements.define("va-theme-provider",this)}constructor(){super(),this.attachShadow({mode:"open"}),this.shadowRoot.innerHTML="\n      <style>\n        * {\n          padding: unset;\n        }\n        :host {\n          --black-color: #181818;\n          --primary-color: #0D65F2;\n          --warning-color: #FFAB1A;\n          --success-color: #10CC4B;\n          --danger-color: #F03D4F;\n          --border-color: color-mix(in oklch, var(--black-color) 15%, white 85%);\n          --secondary-text-color: color-mix(in oklch, var(--black-color) 60%, white 40%);\n        }\n      </style>\n      <slot></slot>\n    "}}
